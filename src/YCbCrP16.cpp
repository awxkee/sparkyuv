// Copyright (C) 2024 Radzivon Bartoshyk
//
// This file belongs to sparkyuv project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "sparkyuv.h"

#undef HWY_TARGET_INCLUDE
#define HWY_TARGET_INCLUDE "src/YCbCrP16.cpp"

#include "hwy/foreach_target.h"
#include "hwy/highway.h"
#include "yuv-inl.h"
#include "YCbCrP16-inl.h"

#if HWY_ONCE
namespace sparkyuv {

#define DECLARE_YUV_EXPORT_HWY(yuv, bit, pixel) HWY_EXPORT(yuv##P##bit##To##pixel##HWY);

DECLARE_YUV_EXPORT_HWY(YUV444, 10, RGBA)
DECLARE_YUV_EXPORT_HWY(YUV444, 10, RGB)
#if SPARKYUV_FULL_CHANNELS
DECLARE_YUV_EXPORT_HWY(YUV444, 10, BGRA)
DECLARE_YUV_EXPORT_HWY(YUV444, 10, ABGR)
DECLARE_YUV_EXPORT_HWY(YUV444, 10, ARGB)
DECLARE_YUV_EXPORT_HWY(YUV444, 10, BGR)
#endif

DECLARE_YUV_EXPORT_HWY(YUV444, 12, RGBA)
DECLARE_YUV_EXPORT_HWY(YUV444, 12, RGB)
#if SPARKYUV_FULL_CHANNELS
DECLARE_YUV_EXPORT_HWY(YUV444, 12, BGRA)
DECLARE_YUV_EXPORT_HWY(YUV444, 12, ABGR)
DECLARE_YUV_EXPORT_HWY(YUV444, 12, ARGB)
DECLARE_YUV_EXPORT_HWY(YUV444, 12, BGR)
#endif

DECLARE_YUV_EXPORT_HWY(YUV422, 10, RGBA)
DECLARE_YUV_EXPORT_HWY(YUV422, 10, RGB)
#if SPARKYUV_FULL_CHANNELS
DECLARE_YUV_EXPORT_HWY(YUV422, 10, ARGB)
DECLARE_YUV_EXPORT_HWY(YUV422, 10, BGRA)
DECLARE_YUV_EXPORT_HWY(YUV422, 10, ABGR)
DECLARE_YUV_EXPORT_HWY(YUV422, 10, BGR)
#endif

DECLARE_YUV_EXPORT_HWY(YUV422, 12, RGBA)
DECLARE_YUV_EXPORT_HWY(YUV422, 12, RGB)
#if SPARKYUV_FULL_CHANNELS
DECLARE_YUV_EXPORT_HWY(YUV422, 12, BGRA)
DECLARE_YUV_EXPORT_HWY(YUV422, 12, ABGR)
DECLARE_YUV_EXPORT_HWY(YUV422, 12, ARGB)
DECLARE_YUV_EXPORT_HWY(YUV422, 12, BGR)
#endif

DECLARE_YUV_EXPORT_HWY(YUV420, 10, RGBA)
DECLARE_YUV_EXPORT_HWY(YUV420, 10, RGB)
#if SPARKYUV_FULL_CHANNELS
DECLARE_YUV_EXPORT_HWY(YUV420, 10, BGRA)
DECLARE_YUV_EXPORT_HWY(YUV420, 10, ABGR)
DECLARE_YUV_EXPORT_HWY(YUV420, 10, ARGB)
DECLARE_YUV_EXPORT_HWY(YUV420, 10, BGR)
#endif

DECLARE_YUV_EXPORT_HWY(YUV420, 12, RGBA)
DECLARE_YUV_EXPORT_HWY(YUV420, 12, RGB)
#if SPARKYUV_FULL_CHANNELS
DECLARE_YUV_EXPORT_HWY(YUV420, 12, BGRA)
DECLARE_YUV_EXPORT_HWY(YUV420, 12, ABGR)
DECLARE_YUV_EXPORT_HWY(YUV420, 12, ARGB)
DECLARE_YUV_EXPORT_HWY(YUV420, 12, BGR)
#endif

#undef DECLARE_YUV_EXPORT_HWY

#define YUV444PXToXXXX_DECLARATION_R(yuvname, pixelType, bit) \
    void yuvname##P##bit##To##pixelType##bit(uint16_t *SPARKYUV_RESTRICT src, const uint32_t srcStride,\
                                     const uint32_t width, const uint32_t height,\
                                     const uint16_t *SPARKYUV_RESTRICT yPlane, const uint32_t yStride,\
                                     const uint16_t *SPARKYUV_RESTRICT uPlane, const uint32_t uStride,\
                                     const uint16_t *SPARKYUV_RESTRICT vPlane, const uint32_t vStride,\
                                     const float kr, const float kb, const SparkYuvColorRange colorRange) {\
         HWY_DYNAMIC_DISPATCH(yuvname##P##bit##To##pixelType##HWY)(src, srcStride, width, height,\
                                                                  yPlane, yStride, uPlane, uStride, vPlane, vStride, \
                                                                   kr, kb, colorRange);\
    }

YUV444PXToXXXX_DECLARATION_R(YUV444, RGBA, 10)
YUV444PXToXXXX_DECLARATION_R(YUV444, RGB, 10)
#if SPARKYUV_FULL_CHANNELS
YUV444PXToXXXX_DECLARATION_R(YUV444, ARGB, 10)
YUV444PXToXXXX_DECLARATION_R(YUV444, ABGR, 10)
YUV444PXToXXXX_DECLARATION_R(YUV444, BGRA, 10)
YUV444PXToXXXX_DECLARATION_R(YUV444, BGR, 10)
#endif

YUV444PXToXXXX_DECLARATION_R(YUV444, RGBA, 12)
YUV444PXToXXXX_DECLARATION_R(YUV444, RGB, 12)
#if SPARKYUV_FULL_CHANNELS
YUV444PXToXXXX_DECLARATION_R(YUV444, ARGB, 12)
YUV444PXToXXXX_DECLARATION_R(YUV444, ABGR, 12)
YUV444PXToXXXX_DECLARATION_R(YUV444, BGRA, 12)
YUV444PXToXXXX_DECLARATION_R(YUV444, BGR, 12)
#endif

YUV444PXToXXXX_DECLARATION_R(YUV422, RGBA, 10)
YUV444PXToXXXX_DECLARATION_R(YUV422, RGB, 10)
#if SPARKYUV_FULL_CHANNELS
YUV444PXToXXXX_DECLARATION_R(YUV422, ARGB, 10)
YUV444PXToXXXX_DECLARATION_R(YUV422, ABGR, 10)
YUV444PXToXXXX_DECLARATION_R(YUV422, BGRA, 10)
YUV444PXToXXXX_DECLARATION_R(YUV422, BGR, 10)
#endif

YUV444PXToXXXX_DECLARATION_R(YUV422, RGBA, 12)
YUV444PXToXXXX_DECLARATION_R(YUV422, RGB, 12)
#if SPARKYUV_FULL_CHANNELS
YUV444PXToXXXX_DECLARATION_R(YUV422, ARGB, 12)
YUV444PXToXXXX_DECLARATION_R(YUV422, ABGR, 12)
YUV444PXToXXXX_DECLARATION_R(YUV422, BGRA, 12)
YUV444PXToXXXX_DECLARATION_R(YUV422, BGR, 12)
#endif

YUV444PXToXXXX_DECLARATION_R(YUV420, RGBA, 10)
YUV444PXToXXXX_DECLARATION_R(YUV420, RGB, 10)
#if SPARKYUV_FULL_CHANNELS
YUV444PXToXXXX_DECLARATION_R(YUV420, ARGB, 10)
YUV444PXToXXXX_DECLARATION_R(YUV420, ABGR, 10)
YUV444PXToXXXX_DECLARATION_R(YUV420, BGRA, 10)
YUV444PXToXXXX_DECLARATION_R(YUV420, BGR, 10)
#endif

YUV444PXToXXXX_DECLARATION_R(YUV420, RGBA, 12)
YUV444PXToXXXX_DECLARATION_R(YUV420, RGB, 12)
#if SPARKYUV_FULL_CHANNELS
YUV444PXToXXXX_DECLARATION_R(YUV420, ARGB, 12)
YUV444PXToXXXX_DECLARATION_R(YUV420, ABGR, 12)
YUV444PXToXXXX_DECLARATION_R(YUV420, BGRA, 12)
YUV444PXToXXXX_DECLARATION_R(YUV420, BGR, 12)
#endif

#undef YUV444PXToXXXX_DECLARATION_R

#define DECLARE_XXXX_TO_YUV_HWY(yuvname, bit, pixel) HWY_EXPORT(pixel##To##yuvname##P##bit##HWY);

DECLARE_XXXX_TO_YUV_HWY(YUV444, 10, RGBA)
DECLARE_XXXX_TO_YUV_HWY(YUV444, 10, RGB)
#if SPARKYUV_FULL_CHANNELS
DECLARE_XXXX_TO_YUV_HWY(YUV444, 10, BGRA)
DECLARE_XXXX_TO_YUV_HWY(YUV444, 10, ABGR)
DECLARE_XXXX_TO_YUV_HWY(YUV444, 10, ARGB)
DECLARE_XXXX_TO_YUV_HWY(YUV444, 10, BGR)
#endif

DECLARE_XXXX_TO_YUV_HWY(YUV444, 12, RGBA)
DECLARE_XXXX_TO_YUV_HWY(YUV444, 12, RGB)
#if SPARKYUV_FULL_CHANNELS
DECLARE_XXXX_TO_YUV_HWY(YUV444, 12, BGRA)
DECLARE_XXXX_TO_YUV_HWY(YUV444, 12, ABGR)
DECLARE_XXXX_TO_YUV_HWY(YUV444, 12, ARGB)
DECLARE_XXXX_TO_YUV_HWY(YUV444, 12, BGR)
#endif

DECLARE_XXXX_TO_YUV_HWY(YUV422, 10, RGBA)
DECLARE_XXXX_TO_YUV_HWY(YUV422, 10, RGB)
#if SPARKYUV_FULL_CHANNELS
DECLARE_XXXX_TO_YUV_HWY(YUV422, 10, BGRA)
DECLARE_XXXX_TO_YUV_HWY(YUV422, 10, ABGR)
DECLARE_XXXX_TO_YUV_HWY(YUV422, 10, ARGB)
DECLARE_XXXX_TO_YUV_HWY(YUV422, 10, BGR)
#endif

DECLARE_XXXX_TO_YUV_HWY(YUV422, 12, RGBA)
DECLARE_XXXX_TO_YUV_HWY(YUV422, 12, RGB)
#if SPARKYUV_FULL_CHANNELS
DECLARE_XXXX_TO_YUV_HWY(YUV422, 12, BGRA)
DECLARE_XXXX_TO_YUV_HWY(YUV422, 12, ABGR)
DECLARE_XXXX_TO_YUV_HWY(YUV422, 12, ARGB)
DECLARE_XXXX_TO_YUV_HWY(YUV422, 12, BGR)
#endif

DECLARE_XXXX_TO_YUV_HWY(YUV420, 10, RGBA)
DECLARE_XXXX_TO_YUV_HWY(YUV420, 10, RGB)
#if SPARKYUV_FULL_CHANNELS
DECLARE_XXXX_TO_YUV_HWY(YUV420, 10, BGRA)
DECLARE_XXXX_TO_YUV_HWY(YUV420, 10, ABGR)
DECLARE_XXXX_TO_YUV_HWY(YUV420, 10, ARGB)
DECLARE_XXXX_TO_YUV_HWY(YUV420, 10, BGR)
#endif

DECLARE_XXXX_TO_YUV_HWY(YUV420, 12, RGBA)
DECLARE_XXXX_TO_YUV_HWY(YUV420, 12, RGB)
#if SPARKYUV_FULL_CHANNELS
DECLARE_XXXX_TO_YUV_HWY(YUV420, 12, BGRA)
DECLARE_XXXX_TO_YUV_HWY(YUV420, 12, ABGR)
DECLARE_XXXX_TO_YUV_HWY(YUV420, 12, ARGB)
DECLARE_XXXX_TO_YUV_HWY(YUV420, 12, BGR)
#endif

#undef DECLARE_XXXX_TO_YUV_HWY

#define PIXEL_TO_YUV_P16_DECLARATION_E(yuvname, bit, pixelType) \
 /** \
 * All RGBA pixels are stored in uint16_t. RGBA10, RGBA12 corresponds a bit depth of the image  \
 */                                               \
        void pixelType##bit##To##yuvname##P##bit(const uint16_t *SPARKYUV_RESTRICT src, const uint32_t srcStride,\
                                            const uint32_t width, const uint32_t height,\
                                            uint16_t *SPARKYUV_RESTRICT yPlane, const uint32_t yStride,\
                                            uint16_t *SPARKYUV_RESTRICT uPlane, const uint32_t uStride,\
                                            uint16_t *SPARKYUV_RESTRICT vPlane, const uint32_t vStride,\
                                            const float kr, const float kb, const SparkYuvColorRange colorRange) {\
          HWY_DYNAMIC_DISPATCH(pixelType##To##yuvname##P##bit##HWY)(src, srcStride, width, height,\
                                                              yPlane, yStride, uPlane, uStride, vPlane, vStride, kr, kb, colorRange);\
        }

PIXEL_TO_YUV_P16_DECLARATION_E(YUV444, 10, RGBA)
PIXEL_TO_YUV_P16_DECLARATION_E(YUV444, 10, RGB)
#if SPARKYUV_FULL_CHANNELS
PIXEL_TO_YUV_P16_DECLARATION_E(YUV444, 10, BGRA)
PIXEL_TO_YUV_P16_DECLARATION_E(YUV444, 10, ABGR)
PIXEL_TO_YUV_P16_DECLARATION_E(YUV444, 10, ARGB)
PIXEL_TO_YUV_P16_DECLARATION_E(YUV444, 10, BGR)
#endif

PIXEL_TO_YUV_P16_DECLARATION_E(YUV444, 12, RGBA)
PIXEL_TO_YUV_P16_DECLARATION_E(YUV444, 12, RGB)
#if SPARKYUV_FULL_CHANNELS
PIXEL_TO_YUV_P16_DECLARATION_E(YUV444, 12, BGRA)
PIXEL_TO_YUV_P16_DECLARATION_E(YUV444, 12, ABGR)
PIXEL_TO_YUV_P16_DECLARATION_E(YUV444, 12, ARGB)
PIXEL_TO_YUV_P16_DECLARATION_E(YUV444, 12, BGR)
#endif

PIXEL_TO_YUV_P16_DECLARATION_E(YUV422, 10, RGBA)
PIXEL_TO_YUV_P16_DECLARATION_E(YUV422, 10, RGB)
#if SPARKYUV_FULL_CHANNELS
PIXEL_TO_YUV_P16_DECLARATION_E(YUV422, 10, BGRA)
PIXEL_TO_YUV_P16_DECLARATION_E(YUV422, 10, ABGR)
PIXEL_TO_YUV_P16_DECLARATION_E(YUV422, 10, ARGB)
PIXEL_TO_YUV_P16_DECLARATION_E(YUV422, 10, BGR)
#endif

PIXEL_TO_YUV_P16_DECLARATION_E(YUV422, 12, RGBA)
PIXEL_TO_YUV_P16_DECLARATION_E(YUV422, 12, RGB)
#if SPARKYUV_FULL_CHANNELS
PIXEL_TO_YUV_P16_DECLARATION_E(YUV422, 12, BGRA)
PIXEL_TO_YUV_P16_DECLARATION_E(YUV422, 12, ABGR)
PIXEL_TO_YUV_P16_DECLARATION_E(YUV422, 12, ARGB)
PIXEL_TO_YUV_P16_DECLARATION_E(YUV422, 12, BGR)
#endif

PIXEL_TO_YUV_P16_DECLARATION_E(YUV420, 10, RGBA)
PIXEL_TO_YUV_P16_DECLARATION_E(YUV420, 10, RGB)
#if SPARKYUV_FULL_CHANNELS
PIXEL_TO_YUV_P16_DECLARATION_E(YUV420, 10, BGRA)
PIXEL_TO_YUV_P16_DECLARATION_E(YUV420, 10, ABGR)
PIXEL_TO_YUV_P16_DECLARATION_E(YUV420, 10, ARGB)
PIXEL_TO_YUV_P16_DECLARATION_E(YUV420, 10, BGR)
#endif

PIXEL_TO_YUV_P16_DECLARATION_E(YUV420, 12, RGBA)
PIXEL_TO_YUV_P16_DECLARATION_E(YUV420, 12, RGB)
#if SPARKYUV_FULL_CHANNELS
PIXEL_TO_YUV_P16_DECLARATION_E(YUV420, 12, BGRA)
PIXEL_TO_YUV_P16_DECLARATION_E(YUV420, 12, ABGR)
PIXEL_TO_YUV_P16_DECLARATION_E(YUV420, 12, ARGB)
PIXEL_TO_YUV_P16_DECLARATION_E(YUV420, 12, BGR)
#endif

#undef XXXXToYUV444PHWY_DECLARATION_E

}
#endif